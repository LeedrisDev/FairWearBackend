services:
  gateway_api:
    container_name: gateway_api
    build:
      context: .
      dockerfile: FairWearGateway.API/Dockerfile
    restart: on-failure
    environment:
      - BRAND_AND_PRODUCT_API_SERVICE_HOST=brand_and_product_service
      - BRAND_AND_PRODUCT_API_SERVICE_PORT_HTTP=80
      - USERS_API_SERVICE_HOST=users_service
      - USERS_API_SERVICE_PORT_HTTP=80
    ports:
      - "80:80"
    networks:
      - fairwear_internal_network
      - users_db_network

  brand_and_product_service:
    container_name: brand_and_product_service
    build:
      context: .
      dockerfile: BrandAndProduct.Service/Dockerfile
    restart: on-failure
    environment:
      - GOODONYOU_SCRAPPER_SERVICE_HOST=good_on_you_scrapper_service
      - GOODONYOU_SCRAPPER_SERVICE_PORT_HTTP=80
      - PRODUCT_DATA_RETRIEVER_SERVICE_HOST=product_data_retriever_service
      - PRODUCT_DATA_RETRIEVER_SERVICE_PORT_HTTP=80
      - BRAND_AND_PRODUCT_DB_SERVICE_HOST=brand_and_product_db
      - BRAND_AND_PRODUCT_DB_SERVICE_PORT_HTTP=5432
      - BRAND_AND_PRODUCT_DB_USER=sa
      - BRAND_AND_PRODUCT_DB_PASSWORD=sa
      - BRAND_AND_PRODUCT_DB_DATABASE_NAME=brand_and_product_db
      - KAFKA_SERVICE_HOST=kafka
      - KAFKA_SERVICE_PORT_HTTP=9092
    ports:
      - "8081:80"
    networks:
      - fairwear_internal_network


  product_data_retriever_service:
    container_name: product_data_retriever_service
    build:
      context: .
      dockerfile: ProductDataRetriever.Service/Dockerfile
    restart: on-failure
    ports:
      - "8082:80"
    networks:
      - fairwear_internal_network


  good_on_you_scrapper_service:
    container_name: good_on_you_scrapper_service
    build:
      context: .
      dockerfile: GoodOnYouScrapper.Service/Dockerfile
    restart: on-failure
    ports:
      - "8083:80"
    networks:
      - fairwear_internal_network
  
  users_service:
    container_name: users_service
    build:
      context: .
      dockerfile: Users.Service/Dockerfile
    restart: on-failure
    environment:
      - USERS_DB_SERVICE_HOST=users_db
      - USERS_DB_SERVICE_PORT_HTTP=5432
      - USERS_DB_USER=sa
      - USERS_DB_PASSWORD=sa
      - USERS_DB_DATABASE_NAME=users_db
      - KAFKA_SERVICE_HOST=kafka
      - KAFKA_SERVICE_PORT_HTTP=9092
    ports:
      - "8084:80"
    networks:
      - users_db_network


  brand_and_product_db:
    container_name: brand_and_product_db
    build:
      context: .
      dockerfile: Databases/BrandsAndProductsDatabase/Dockerfile
    restart: on-failure
    environment:
      - POSTGRES_USER=sa
      - POSTGRES_PASSWORD=sa
      - POSTGRES_DB=brand_and_product_db
    ports:
      - "5436:5432"
    networks:
      - fairwear_internal_network

  authentication_db:
    container_name: authentication_db
    build:
      context: .
      dockerfile: Databases/AuthenticationDatabase/Dockerfile
    restart: on-failure
    environment:
      - POSTGRES_USER=sa
      - POSTGRES_PASSWORD=sa
      - POSTGRES_DB=authentication_db
    ports:
      - "5433:5432"
    networks:
      - fairwear_internal_network
      
  users_db:
    container_name: users_db
    build:
      context: .
      dockerfile: Databases/UsersDatabase/Dockerfile
    restart: on-failure
    environment:
      - POSTGRES_USER=sa
      - POSTGRES_PASSWORD=sa
      - POSTGRES_DB=users_db
    ports:
      - "5434:5432"
    networks:
      - users_db_network
  
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - fairwear_internal_network
      - users_db_network

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "products:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    networks:
      - fairwear_internal_network
      - users_db_network

networks:
  fairwear_internal_network:
    driver: bridge
  users_db_network:
    driver: bridge